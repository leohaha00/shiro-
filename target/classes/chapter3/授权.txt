授权，也叫访问控制，
	即在应用中控制谁能访问哪些资源（如访问页面/编辑数据/页面操作等）。
	在授权中需了解的几个关键对象：主体（Subject）、资源（Resource）、权限（Permission）、角色（Role）。
主体：即访问应用的用户
	在Shiro中使用Subject代表该用户，用户只有授权后才可以访问相应的资源
资源：
	在应用中用户可以访问的任何东西，比如访问JSP页面、查看/编辑某些数据、访问某
	个业务方法、打印文本等等都是资源。用户只要授权后才能访问
权限
	安全策略中的原子授权单位，通过权限我们可以表示在应用中用户有没有操作某个资源的权力。即权限表示在应用中用户能不能访问某个资源，如：
	访问用户列表页面
	查看/新增/修改/删除用户数据（即很多时候都是CRUD（增查改删）式权限控制）
	打印文档等等。。。
	 
	如上可以看出，权限代表了用户有没有操作某个资源的权利，即反映在某个资源上的操作允不允许，不反映谁去执行这个操作。所以后续还需要把权限赋予给用户，即定义哪个用户允许在某个资源上做什么操作（权限），Shiro不会去做这件事情，而是由实现人员提供。
	 
	Shiro支持粗粒度权限（如用户模块的所有权限）和细粒度权限（操作某个用户的权限，即实例级别的）
角色
	角色代表了操作集合，可以理解为权限的集合，一般情况下我们会赋予用户角色而不是权限，即这样用户可以拥有一组权限，赋予权限时比较方便。
	典型的如：项目经理、技术总监、CTO、开发工程师等都是角色，不同的角色拥有一组不同的权限
隐式角色：
	即直接通过角色来验证用户有没有操作权限，如在应用中CTO、技术总监、开发工程师可以使用打印机，假设某天不允许开发工程师
	使用打印机，此时需要从应用中删除相应代码；再如在应用中CTO、技术总监可以查看用户、查看权限；突然有一天不允许技术总监
	查看用户、查看权限了，需要在相关代码中把技术总监角色从判断逻辑中删除掉；即粒度是以角色为单位进行访问控制的，粒度较粗；
	如果进行修改可能造成多处代码修改。
显示角色：
	在程序中通过权限控制谁能访问某个资源，角色聚合一组权限集合；这样假设哪个角色不能访问某个资源，只需要从角色代表的权限集
	合中移除即可；无须修改多处代码；即粒度是以资源/实例为单位的；粒度较细
	
	
	“RBAC”和“RBAC新解”分别了解“基于角色的访问控制”“基于资源的访问控制(Resource-Based Access Control)”。


Shiro支持三种方式的授权
	编程式：通过写if/else授权代码块完成： 
	Java代码  收藏代码
	Subject subject = SecurityUtils.getSubject();  
	if(subject.hasRole(“admin”)) {  
	    //有权限  
	} else {  
	    //无权限  
	}   
	 
	注解式：通过在执行的Java方法上放置相应的注解完成： 
	Java代码  收藏代码
	@RequiresRoles("admin")  
	public void hello() {  
	    //有权限  
	}   
	没有权限将抛出相应的异常；
	 
	JSP/GSP标签：在JSP/GSP页面通过相应的标签完成： 
	Java代码  收藏代码
	<shiro:hasRole name="admin">  
	<!— 有权限 —>  
	</shiro:hasRole> 
	
Permission
字符串通配符权限
规则：“资源标识符：操作：对象实例ID”  即对哪个资源的哪个实例可以进行什么操作。其默认支持通配符权限字符串，
	“:”表示资源/操作/实例的分割；“,”表示操作的分割；“*”表示任意资源/操作/实例。
	1、单个资源单个权限 
		subject().checkPermissions("system:user:update");  
		用户拥有资源“system:user”的“update”权限。
	2、单个资源多个权限
		ini配置文件
			role41=system:user:update,system:user:delete  
		然后通过如下代码判断
			subject().checkPermissions("system:user:update", "system:user:delete");  
		用户拥有资源“system:user”的“update”和“delete”权限。如上可以简写成：
			ini配置（表示角色4拥有system:user资源的update和delete权限）   
			role42="system:user:update,delete"    
 		接着可以通过如下代码判断 
			subject().checkPermissions("system:user:update,delete");  
		通过“system:user:update,delete”验证"system:user:update, system:user:delete"是没问题的，但是反过来是规则不成立
	3、单个资源全部权限
		ini配置 
		
			role51="system:user:create,update,delete,view"  
		然后通过如下代码判断 
			subject().checkPermissions("system:user:create,delete,update:view");  
		用户拥有资源“system:user”的“create”、“update”、“delete”和“view”所有权限。如上可以简写成：
		 
		ini配置文件（表示角色5拥有system:user的所有权限）
			role52=system:user:*  
		也可以简写为（推荐上边的写法）：
			role53=system:user  
		然后通过如下代码判断
			subject().checkPermissions("system:user:*");  
			subject().checkPermissions("system:user");   
		通过“system:user:*”验证“system:user:create,delete,update:view”可以，但是反过来是不成立的。	
	4、所有资源全部权限
		ini配置 
			role61=*:view  
		然后通过如下代码判断
			subject().checkPermissions("user:view");  
		用户拥有所有资源的“view”所有权限。假设判断的权限是“"system:user:view”，那么需要“role5=*:*:view”这样写才行
	5、实例级别的权限
		5.1、单个实例单个权限
		ini配置
			role71=user:view:1  
		对资源user的1实例拥有view权限。
		然后通过如下代码判断 
			subject().checkPermissions("user:view:1");  
		 
		5.2、单个实例多个权限
		ini配置           
			role72="user:update,delete:1"  
		对资源user的1实例拥有update、delete权限。
		然后通过如下代码判断
			subject().checkPermissions("user:delete,update:1");  
			subject().checkPermissions("user:update:1", "user:delete:1");   
		  
		5.3、单个实例所有权限
		ini配置  
			role73=user:*:1  
		对资源user的1实例拥有所有权限。
		然后通过如下代码判断 
			subject().checkPermissions("user:update:1", "user:delete:1", "user:view:1");  
		   
		5.4、所有实例单个权限
		ini配置 
			role74=user:auth:*  
		对资源user的1实例拥有所有权限。
		然后通过如下代码判断 
		 	subject().checkPermissions("user:auth:1", "user:auth:2");  
		  
		5.5、所有实例所有权限
		ini配置 
		 
		role75=user:*:*  
		对资源user的1实例拥有所有权限。
		然后通过如下代码判断     
		 
		subject().checkPermissions("user:view:1", "user:auth:2");